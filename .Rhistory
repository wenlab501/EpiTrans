theme_minimal()
res
#' Title
#'
#' Descriptions Here
#' @param mean mean.
#' @param sd sd
#' @keywords median
#' @export
#' @examples
#' median_function(seq(1:10))
plot_Rt <- function(t, Rt, interval = c("day","week","month")){
require("ggplot2")
if(length(interval)>2) interval <- interval[1]
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
t <- as.factor(t)
levels(t) <- level.t
data <- data.frame(xtabs(R~t,))
meanR <- tapply(R, t, FUN=mean)
minR <- tapply(R, t, FUN=min)
maxR <- tapply(R, t, FUN=max)
meanR[is.na(meanR)]<-0
minR[is.na(minR)]<-0
maxR[is.na(maxR)]<-0
data <- data.frame(t = level.t,meanR,minR,maxR)
data$date <- as.numeric(data$t)
xbrk <- round(seq(1,nrow(data),length.out = 6))
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1),lwd=1) +
geom_line(aes(x = date, y = minR, group = 1),lty=2)+
geom_line(aes(x = date, y = maxR, group = 1),lty=2)+
scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab("cases")+
theme_minimal()
return(res)
}
plot_Rt(tt,R)
plot_Rt(tt,R,"week")
#' Title
#'
#' Descriptions Here
#' @param mean mean.
#' @param sd sd
#' @keywords median
#' @export
#' @examples
#' median_function(seq(1:10))
plot_Rt <- function(t, Rt, interval = c("day","week","month")){
require("ggplot2")
if(length(interval)>2) interval <- interval[1]
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
t <- as.factor(t)
levels(t) <- level.t
meanR <- tapply(R, t, FUN=mean)
minR <- tapply(R, t, FUN=min)
maxR <- tapply(R, t, FUN=max)
meanR[is.na(meanR)]<-0
minR[is.na(minR)]<-0
maxR[is.na(maxR)]<-0
data <- data.frame(t = level.t,meanR,minR,maxR)
data$date <- as.numeric(data$t)
xbrk <- round(seq(1,nrow(data),length.out = 6))
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1),lwd=1) +
geom_line(aes(x = date, y = minR, group = 1),lty=2)+
geom_line(aes(x = date, y = maxR, group = 1),lty=2)+
scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab("cases")+
theme_minimal()
return(res)
}
plot_Rt(tt,R,"week")
plot_Rt(tt,R)
interval="week"
t
t=tt
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
t <- as.factor(t)
levels(t) <- level.t
t
levels(t)
meanR <- tapply(R, t, FUN=mean)
meanR
minR <- tapply(R, t, FUN=min)
maxR <- tapply(R, t, FUN=max)
meanR[is.na(meanR)]<-0
minR[is.na(minR)]<-0
maxR[is.na(maxR)]<-0
data <- data.frame(t = level.t,meanR,minR,maxR)
data
data$date <- as.numeric(data$t)
data$date
data$date <- as.numeric(level.t)
xbrk <- round(seq(1,nrow(data),length.out = 6))
data$date <- 1:nrow(data)
xbrk <- round(seq(1,nrow(data),length.out = 6))
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1),lwd=1) +
geom_line(aes(x = date, y = minR, group = 1),lty=2)+
geom_line(aes(x = date, y = maxR, group = 1),lty=2)+
scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab("cases")+
theme_minimal()
res
plot_epi(tt,"week")
library(roxygen2)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(EpiTrans)
library(EpiTrans)
x=dengue$long
y=dengue$lat
t=dengue$date
R=Rj(x,y,t)
plot_Rt(t,R$Rj)
?Rj
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?animate_points
roxygen2::roxygenise()
57/15
pnorm(3.8)
1-pnorm(3.8)
sum(50
50
55
60
60
85
85
85
40
60
40
20
65
65
60
60
60)
sum(50,
50,
55,
60,
60,
85,
85,
85,
40,
60,
40,
20,
65,
65,
60,
60,
60)
# 1. sample data ------------------
setwd("data")
for(file in dir()) load(file)
setwd("../")
dir()
library(EpiTrans)
library(EpiTrans)
library(EpiTrans)
library(EpiTrans)
library(EpiTrans)
library(EpiTrans)
remove.packages("EpiTrans")
roxygen2::roxygenise()
?animate_points()
rm(list = c("animate_grid", "animate_points"))
roxygen2::roxygenise()
library(ggplot2)
plot_epi <- function(t, interval = c("day","week","month")){
require("ggplot2")
if(length(interval)>2) interval <- interval[1]
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
t <- as.factor(t)
levels(t) <- level.t
data <- data.frame(xtabs(~t))
data$date <- as.numeric(data$t)
xbrk <- round(seq(1,nrow(data),length.out = 6))
res <- ggplot(data) + geom_line(aes(x = date, y = Freq, group = 1),lwd=1) +
geom_point(aes(x = date, y = Freq, group = 1))+
scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab("cases")+
theme_minimal()
return(res)
}
#' Title
#'
#' Descriptions Here
#' @param mean mean.
#' @param sd sd
#' @keywords median
#' @export
#' @examples
#' median_function(seq(1:10))
plot_epi <- function(t, interval = c("day","week","month"), plot.points=NULL){
require("ggplot2")
if(length(interval)>2) interval <- interval[1]
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
if(is.null(plot.points)){
if(interval == "day") plot.points=F else plot.points=T
}
t <- as.factor(t)
levels(t) <- level.t
data <- data.frame(xtabs(~t))
data$date <- as.numeric(data$t)
xbrk <- round(seq(1,nrow(data),length.out = 6))
res <- ggplot(data) + geom_line(aes(x = date, y = Freq, group = 1),lwd=1)
if(plot.points) res <- res + geom_point(aes(x = date, y = Freq, group = 1))+
res <- res +scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab("cases")+
theme_minimal()
return(res)
}
roxygen2::roxygenise()
rm(list = c("animate_grid", "animate_points", "plot_epi"))
roxygen2::roxygenise()
par()\$plt
#' Title
#'
#' Descriptions Here
#' @param mean mean.
#' @param sd sd
#' @keywords median
#' @export
#' @examples
#' median_function(seq(1:10))
plot_Rt <- function(t, Rt, Rt2=NULL, interval = c("day","week","month")){
require("ggplot2")
if(length(interval)>2) interval <- interval[1]
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
t <- as.factor(t)
levels(t) <- level.t
meanR <- tapply(Rt, t, FUN=mean)
minR <- tapply(Rt, t, FUN=min)
maxR <- tapply(Rt, t, FUN=max)
meanR[is.na(meanR)]<-0
minR[is.na(minR)]<-0
maxR[is.na(maxR)]<-0
data <- data.frame(t = level.t,meanR,minR,maxR)
data$date <- 1:nrow(data)
xbrk <- round(seq(1,nrow(data),length.out = 6))
if(!is.null(Rt2)){
meanR2 <- tapply(Rt2, t, FUN=mean)
minR2 <- tapply(Rt2, t, FUN=min)
maxR2 <- tapply(Rt2, t, FUN=max)
meanR2[is.na(meanR2)]<-0
minR2[is.na(minR2)]<-0
maxR2[is.na(maxR2)]<-0
data <- data.frame(data,meanR2,minR2,maxR2)
}
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1),lwd=1,col="orange") +
geom_line(aes(x = date, y = minR, group = 1),lty=2,col="orange")+
geom_line(aes(x = date, y = maxR, group = 1),lty=2,col="orange")+
geom_ribbon(aes(ymin = minR, ymax = maxR), alpha = 0.1)
if(!is.null(Rt2)){
res <- res+ geom_line(aes(x = date, y = meanR2, group = 2),lwd=1,col="darkgreen") +
geom_line(aes(x = date, y = minR2, group = 2),lty=2,col="darkgreen")+
geom_line(aes(x = date, y = maxR2, group = 2),lty=2,col="darkgreen")
}
res<-res + geom_hline(yintercept=1, linetype="dashed", color = "red")
res <- res + scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab("cases")+
theme_minimal()
return(res)
}
t=TT
a=runif(100,0,100)
min(a)
a
a=sample.int(100,100,T)
a
min(a)
max(a)
quantile(a,0)
quantile(a,100)
quantile(a,1)
quantile(a,0.25)
quantile(a,0.025)
?t.test
min(a)
quantile(a,1-conf.level)
quantile(a,0.5-conf.level/2)
plot_Rt(t = dengue$date, Rt=res_adj$R, Rt2=res$Rj)
#' Title
#'
#' Descriptions Here
#' @param mean mean.
#' @param sd sd
#' @keywords median
#' @export
#' @examples
#' median_function(seq(1:10))
plot_Rt <- function(t, Rt, Rt2=NULL, conf.level=1, interval = c("day","week","month"), col="orange",col2="darkgreen"){
require("ggplot2")
if(length(interval)>2) interval <- interval[1]
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
t <- as.factor(t)
levels(t) <- level.t
meanR <- tapply(Rt, t, FUN=function(.) mean(.,na.rm = T))
minR <- tapply(Rt, t, FUN=function(.) quantile(.,0.5-conf.level/2,na.rm = T))
maxR <- tapply(Rt, t, FUN=function(.) quantile(.,0.5+conf.level/2,na.rm = T))
meanR[is.na(meanR)]<-0
minR[is.na(minR)]<-0
maxR[is.na(maxR)]<-0
data <- data.frame(t = level.t,meanR,minR,maxR)
data$date <- 1:nrow(data)
xbrk <- round(seq(1,nrow(data),length.out = 6))
if(!is.null(Rt2)){
meanR2 <- tapply(Rt2, t, FUN=function(.) mean(.,na.rm = T))
minR2 <- tapply(Rt2, t, FUN=function(.) quantile(.,0.5-conf.level/2,na.rm = T))
maxR2 <- tapply(Rt2, t, FUN=function(.) quantile(.,0.5+conf.level/2,na.rm = T))
meanR2[is.na(meanR2)]<-0
minR2[is.na(minR2)]<-0
maxR2[is.na(maxR2)]<-0
data <- data.frame(data,meanR2,minR2,maxR2)
}
if(is.null(Rt2)){
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1),lwd=1,col=col) +
geom_line(aes(x = date, y = minR, group = 1),lty=2,col=col)+
geom_line(aes(x = date, y = maxR, group = 1),lty=2,col=col)+
geom_ribbon(aes(x = date, ymin = minR, ymax = maxR), fill=col, alpha = 0.2)
}else{
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1,col="Rt"),lwd=1) +
geom_line(aes(x = date, y = minR, group = 1),lty=2,col=col)+
geom_line(aes(x = date, y = maxR, group = 1),lty=2,col=col)+
geom_ribbon(aes(x = date, ymin = minR, ymax = maxR), fill=col, alpha = 0.2)+
geom_line(aes(x = date, y = meanR2, group = 2,col="Rt2"),lwd=1) +
geom_line(aes(x = date, y = minR2, group = 2),lty=2,col=col2)+
geom_line(aes(x = date, y = maxR2, group = 2),lty=2,col=col2)+
geom_ribbon(aes(x = date, ymin = minR2, ymax = maxR2), fill=col, alpha = 0.2)+
scale_color_manual(NULL,breaks = c("Rt","Rt2"),values = c("Rt"=col,"Rt2"=col2))
}
res<-res + geom_hline(yintercept=1, linetype="dashed", color = "red")
res <- res + scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab(paste0("Rt (conf.lvl=",conf.level*100,"%)"))+
theme_minimal()
return(res)
}
#' Title
#'
#' Descriptions Here
#' @param mean mean.
#' @param sd sd
#' @keywords median
#' @export
#' @examples
#' median_function(seq(1:10))
plot_Rt <- function(t, Rt, Rt2=NULL, conf.level=1, interval = c("day","week","month"), col="orange",col2="darkgreen",label="Rt",label2="Rt2"){
require("ggplot2")
if(length(interval)>2) interval <- interval[1]
date.diff=as.numeric(max(t)-min(t))
level.t <- min(t)+0:date.diff
if(interval=="week"){
t <- strftime(t,"%Y-%W")
level.t <- unique(strftime(level.t,"%Y-%W"))
}else if(interval=="month"){
t <- strftime(t,"%Y-%m")
level.t <- unique(strftime(level.t,"%Y-%m"))
}
t <- as.factor(t)
levels(t) <- level.t
meanR <- tapply(Rt, t, FUN=function(.) mean(.,na.rm = T))
minR <- tapply(Rt, t, FUN=function(.) quantile(.,0.5-conf.level/2,na.rm = T))
maxR <- tapply(Rt, t, FUN=function(.) quantile(.,0.5+conf.level/2,na.rm = T))
meanR[is.na(meanR)]<-0
minR[is.na(minR)]<-0
maxR[is.na(maxR)]<-0
data <- data.frame(t = level.t,meanR,minR,maxR)
data$date <- 1:nrow(data)
xbrk <- round(seq(1,nrow(data),length.out = 6))
if(!is.null(Rt2)){
meanR2 <- tapply(Rt2, t, FUN=function(.) mean(.,na.rm = T))
minR2 <- tapply(Rt2, t, FUN=function(.) quantile(.,0.5-conf.level/2,na.rm = T))
maxR2 <- tapply(Rt2, t, FUN=function(.) quantile(.,0.5+conf.level/2,na.rm = T))
meanR2[is.na(meanR2)]<-0
minR2[is.na(minR2)]<-0
maxR2[is.na(maxR2)]<-0
data <- data.frame(data,meanR2,minR2,maxR2)
}
if(is.null(Rt2)){
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1),lwd=1,col=col) +
geom_line(aes(x = date, y = minR, group = 1),lty=2,col=col)+
geom_line(aes(x = date, y = maxR, group = 1),lty=2,col=col)+
geom_ribbon(aes(x = date, ymin = minR, ymax = maxR), fill=col, alpha = 0.2)
}else{
res <- ggplot(data) + geom_line(aes(x = date, y = meanR, group = 1,col="Rt"),lwd=1) +
geom_line(aes(x = date, y = minR, group = 1),lty=2,col=col)+
geom_line(aes(x = date, y = maxR, group = 1),lty=2,col=col)+
geom_ribbon(aes(x = date, ymin = minR, ymax = maxR), fill=col, alpha = 0.2)+
geom_line(aes(x = date, y = meanR2, group = 2,col="Rt2"),lwd=1) +
geom_line(aes(x = date, y = minR2, group = 2),lty=2,col=col2)+
geom_line(aes(x = date, y = maxR2, group = 2),lty=2,col=col2)+
geom_ribbon(aes(x = date, ymin = minR2, ymax = maxR2), fill=col, alpha = 0.2)+
scale_color_manual(NULL,breaks = c("Rt","Rt2"),values = c("Rt"=col,"Rt2"=col2),labels = c("Rt"=label,"Rt2"=label2))
}
res<-res + geom_hline(yintercept=1, linetype="dashed", color = "red")
res <- res + scale_x_continuous(breaks=xbrk, labels = data$t[xbrk])+
xlab(paste("by",interval))+ylab(paste0("Rt (conf.lvl=",conf.level*100,"%)"))+
theme_minimal()
if(!is.null(Rt2)){res<-res+theme(legend.position = c(.9, .9))}
return(res)
}
animate_points(t =df$date, x = df$long, y= df$lat, Rj = df$Rj, basemap = Taiwan)
df
dengue$Rj = res_adj$Rj
res_adj = Rj(t = dengue$date, x = dengue$long, y = dengue$lat,GI.pdf = lpdf_GI(),SW.pdf = lpdf_SW(), adjSP = T)
summary(res_adj$Rj)
dengue$Rj = res_adj$Rj
dengue =dengue[dengue$date > as.Date("2007-09-15") & dengue$date < as.Date("2007-10-15"),]
plot_points(x = dengue$long, y= dengue$lat, Rj = dengue$Rj, basemap = Taiwan)
roxygen2::roxygenise()
rm(list = c("plot_Rt"))
roxygen2::roxygenise()
?image
plot_trans(res_adj)
Rj=res_adj
Mat = Matrix(Rj$Pij[from,to])
col = c("white",hcl.colors(19, "YlOrRd", rev = TRUE))
from = 1:200; to = 1:200
Mat = Matrix(Rj$Pij[from,to])
col = c("white",hcl.colors(19, "YlOrRd", rev = TRUE))
image(Mat, colorkey = T, col = col, lwd=0)
image(Mat, colorkey = T, col = col, lwd=0,title(="A"))
image(Mat, colorkey = T, col = col, lwd=0,title="A")
image(Mat, colorkey = T, col = col, lwd=0,main="A")
image(Mat, colorkey = T, col = col, lwd=0,main=NULL)
roxygen2::roxygenise()
check()
library(magrittr)
"devtools"
"devtools"%>% library
"devtools" %>% library
"devtools" %>% library()
library("devtools")
"devtools" %>% library("roxygen2")
library("roxygen2")
check()
rm(list = c("animate_grid", "animate_points"))
check()
update.packages(ask = FALSE)
remove.packages("EpiTrans")
detach("package:EpiTrans", unload = TRUE)
library(devtools)
install("D:/Github/EpiTrans")
install("D:/Github/EpiTrans")
install("D:/Github/EpiTrans")
install("D:/Github/EpiTrans")
library(EpiTrans)
animate_grid()
roxygen2::roxygenise()
library(EpiTrans)
roxygen2::roxygenise()
